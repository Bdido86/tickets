// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: client.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaFrontendClient is the client API for CinemaFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaFrontendClient interface {
	UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
	Films(ctx context.Context, in *FilmsRequest, opts ...grpc.CallOption) (CinemaFrontend_FilmsClient, error)
	FilmRoom(ctx context.Context, in *FilmRoomRequest, opts ...grpc.CallOption) (*FilmRoomResponse, error)
	TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error)
	TicketDelete(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error)
	MyTickets(ctx context.Context, in *MyTicketsRequest, opts ...grpc.CallOption) (*MyTicketsResponse, error)
}

type cinemaFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaFrontendClient(cc grpc.ClientConnInterface) CinemaFrontendClient {
	return &cinemaFrontendClient{cc}
}

func (c *cinemaFrontendClient) UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, "/api_client.CinemaFrontend/UserAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaFrontendClient) Films(ctx context.Context, in *FilmsRequest, opts ...grpc.CallOption) (CinemaFrontend_FilmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CinemaFrontend_ServiceDesc.Streams[0], "/api_client.CinemaFrontend/Films", opts...)
	if err != nil {
		return nil, err
	}
	x := &cinemaFrontendFilmsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CinemaFrontend_FilmsClient interface {
	Recv() (*FilmsResponse, error)
	grpc.ClientStream
}

type cinemaFrontendFilmsClient struct {
	grpc.ClientStream
}

func (x *cinemaFrontendFilmsClient) Recv() (*FilmsResponse, error) {
	m := new(FilmsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cinemaFrontendClient) FilmRoom(ctx context.Context, in *FilmRoomRequest, opts ...grpc.CallOption) (*FilmRoomResponse, error) {
	out := new(FilmRoomResponse)
	err := c.cc.Invoke(ctx, "/api_client.CinemaFrontend/FilmRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaFrontendClient) TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error) {
	out := new(TicketCreateResponse)
	err := c.cc.Invoke(ctx, "/api_client.CinemaFrontend/TicketCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaFrontendClient) TicketDelete(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error) {
	out := new(TicketDeleteResponse)
	err := c.cc.Invoke(ctx, "/api_client.CinemaFrontend/TicketDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaFrontendClient) MyTickets(ctx context.Context, in *MyTicketsRequest, opts ...grpc.CallOption) (*MyTicketsResponse, error) {
	out := new(MyTicketsResponse)
	err := c.cc.Invoke(ctx, "/api_client.CinemaFrontend/MyTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaFrontendServer is the server API for CinemaFrontend service.
// All implementations must embed UnimplementedCinemaFrontendServer
// for forward compatibility
type CinemaFrontendServer interface {
	UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error)
	Films(*FilmsRequest, CinemaFrontend_FilmsServer) error
	FilmRoom(context.Context, *FilmRoomRequest) (*FilmRoomResponse, error)
	TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error)
	TicketDelete(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error)
	MyTickets(context.Context, *MyTicketsRequest) (*MyTicketsResponse, error)
	mustEmbedUnimplementedCinemaFrontendServer()
}

// UnimplementedCinemaFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedCinemaFrontendServer struct {
}

func (UnimplementedCinemaFrontendServer) UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuth not implemented")
}
func (UnimplementedCinemaFrontendServer) Films(*FilmsRequest, CinemaFrontend_FilmsServer) error {
	return status.Errorf(codes.Unimplemented, "method Films not implemented")
}
func (UnimplementedCinemaFrontendServer) FilmRoom(context.Context, *FilmRoomRequest) (*FilmRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmRoom not implemented")
}
func (UnimplementedCinemaFrontendServer) TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketCreate not implemented")
}
func (UnimplementedCinemaFrontendServer) TicketDelete(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketDelete not implemented")
}
func (UnimplementedCinemaFrontendServer) MyTickets(context.Context, *MyTicketsRequest) (*MyTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTickets not implemented")
}
func (UnimplementedCinemaFrontendServer) mustEmbedUnimplementedCinemaFrontendServer() {}

// UnsafeCinemaFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaFrontendServer will
// result in compilation errors.
type UnsafeCinemaFrontendServer interface {
	mustEmbedUnimplementedCinemaFrontendServer()
}

func RegisterCinemaFrontendServer(s grpc.ServiceRegistrar, srv CinemaFrontendServer) {
	s.RegisterService(&CinemaFrontend_ServiceDesc, srv)
}

func _CinemaFrontend_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaFrontendServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_client.CinemaFrontend/UserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaFrontendServer).UserAuth(ctx, req.(*UserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaFrontend_Films_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilmsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CinemaFrontendServer).Films(m, &cinemaFrontendFilmsServer{stream})
}

type CinemaFrontend_FilmsServer interface {
	Send(*FilmsResponse) error
	grpc.ServerStream
}

type cinemaFrontendFilmsServer struct {
	grpc.ServerStream
}

func (x *cinemaFrontendFilmsServer) Send(m *FilmsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CinemaFrontend_FilmRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaFrontendServer).FilmRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_client.CinemaFrontend/FilmRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaFrontendServer).FilmRoom(ctx, req.(*FilmRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaFrontend_TicketCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaFrontendServer).TicketCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_client.CinemaFrontend/TicketCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaFrontendServer).TicketCreate(ctx, req.(*TicketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaFrontend_TicketDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaFrontendServer).TicketDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_client.CinemaFrontend/TicketDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaFrontendServer).TicketDelete(ctx, req.(*TicketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaFrontend_MyTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaFrontendServer).MyTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_client.CinemaFrontend/MyTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaFrontendServer).MyTickets(ctx, req.(*MyTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaFrontend_ServiceDesc is the grpc.ServiceDesc for CinemaFrontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaFrontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_client.CinemaFrontend",
	HandlerType: (*CinemaFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuth",
			Handler:    _CinemaFrontend_UserAuth_Handler,
		},
		{
			MethodName: "FilmRoom",
			Handler:    _CinemaFrontend_FilmRoom_Handler,
		},
		{
			MethodName: "TicketCreate",
			Handler:    _CinemaFrontend_TicketCreate_Handler,
		},
		{
			MethodName: "TicketDelete",
			Handler:    _CinemaFrontend_TicketDelete_Handler,
		},
		{
			MethodName: "MyTickets",
			Handler:    _CinemaFrontend_MyTickets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Films",
			Handler:       _CinemaFrontend_Films_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}
