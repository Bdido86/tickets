// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaBackendClient is the client API for CinemaBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaBackendClient interface {
	UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
	Films(ctx context.Context, in *FilmsRequest, opts ...grpc.CallOption) (CinemaBackend_FilmsClient, error)
	FilmRoom(ctx context.Context, in *FilmRoomRequest, opts ...grpc.CallOption) (*FilmRoomResponse, error)
	TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error)
	TicketDelete(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error)
	MyTickets(ctx context.Context, in *MyTicketsRequest, opts ...grpc.CallOption) (*MyTicketsResponse, error)
}

type cinemaBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaBackendClient(cc grpc.ClientConnInterface) CinemaBackendClient {
	return &cinemaBackendClient{cc}
}

func (c *cinemaBackendClient) UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, "/api_server.CinemaBackend/UserAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaBackendClient) Films(ctx context.Context, in *FilmsRequest, opts ...grpc.CallOption) (CinemaBackend_FilmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CinemaBackend_ServiceDesc.Streams[0], "/api_server.CinemaBackend/Films", opts...)
	if err != nil {
		return nil, err
	}
	x := &cinemaBackendFilmsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CinemaBackend_FilmsClient interface {
	Recv() (*FilmsResponse, error)
	grpc.ClientStream
}

type cinemaBackendFilmsClient struct {
	grpc.ClientStream
}

func (x *cinemaBackendFilmsClient) Recv() (*FilmsResponse, error) {
	m := new(FilmsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cinemaBackendClient) FilmRoom(ctx context.Context, in *FilmRoomRequest, opts ...grpc.CallOption) (*FilmRoomResponse, error) {
	out := new(FilmRoomResponse)
	err := c.cc.Invoke(ctx, "/api_server.CinemaBackend/FilmRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaBackendClient) TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error) {
	out := new(TicketCreateResponse)
	err := c.cc.Invoke(ctx, "/api_server.CinemaBackend/TicketCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaBackendClient) TicketDelete(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error) {
	out := new(TicketDeleteResponse)
	err := c.cc.Invoke(ctx, "/api_server.CinemaBackend/TicketDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaBackendClient) MyTickets(ctx context.Context, in *MyTicketsRequest, opts ...grpc.CallOption) (*MyTicketsResponse, error) {
	out := new(MyTicketsResponse)
	err := c.cc.Invoke(ctx, "/api_server.CinemaBackend/MyTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaBackendServer is the server API for CinemaBackend service.
// All implementations must embed UnimplementedCinemaBackendServer
// for forward compatibility
type CinemaBackendServer interface {
	UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error)
	Films(*FilmsRequest, CinemaBackend_FilmsServer) error
	FilmRoom(context.Context, *FilmRoomRequest) (*FilmRoomResponse, error)
	TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error)
	TicketDelete(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error)
	MyTickets(context.Context, *MyTicketsRequest) (*MyTicketsResponse, error)
	mustEmbedUnimplementedCinemaBackendServer()
}

// UnimplementedCinemaBackendServer must be embedded to have forward compatible implementations.
type UnimplementedCinemaBackendServer struct {
}

func (UnimplementedCinemaBackendServer) UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuth not implemented")
}
func (UnimplementedCinemaBackendServer) Films(*FilmsRequest, CinemaBackend_FilmsServer) error {
	return status.Errorf(codes.Unimplemented, "method Films not implemented")
}
func (UnimplementedCinemaBackendServer) FilmRoom(context.Context, *FilmRoomRequest) (*FilmRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmRoom not implemented")
}
func (UnimplementedCinemaBackendServer) TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketCreate not implemented")
}
func (UnimplementedCinemaBackendServer) TicketDelete(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketDelete not implemented")
}
func (UnimplementedCinemaBackendServer) MyTickets(context.Context, *MyTicketsRequest) (*MyTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTickets not implemented")
}
func (UnimplementedCinemaBackendServer) mustEmbedUnimplementedCinemaBackendServer() {}

// UnsafeCinemaBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaBackendServer will
// result in compilation errors.
type UnsafeCinemaBackendServer interface {
	mustEmbedUnimplementedCinemaBackendServer()
}

func RegisterCinemaBackendServer(s grpc.ServiceRegistrar, srv CinemaBackendServer) {
	s.RegisterService(&CinemaBackend_ServiceDesc, srv)
}

func _CinemaBackend_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaBackendServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_server.CinemaBackend/UserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaBackendServer).UserAuth(ctx, req.(*UserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaBackend_Films_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilmsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CinemaBackendServer).Films(m, &cinemaBackendFilmsServer{stream})
}

type CinemaBackend_FilmsServer interface {
	Send(*FilmsResponse) error
	grpc.ServerStream
}

type cinemaBackendFilmsServer struct {
	grpc.ServerStream
}

func (x *cinemaBackendFilmsServer) Send(m *FilmsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CinemaBackend_FilmRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaBackendServer).FilmRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_server.CinemaBackend/FilmRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaBackendServer).FilmRoom(ctx, req.(*FilmRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaBackend_TicketCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaBackendServer).TicketCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_server.CinemaBackend/TicketCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaBackendServer).TicketCreate(ctx, req.(*TicketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaBackend_TicketDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaBackendServer).TicketDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_server.CinemaBackend/TicketDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaBackendServer).TicketDelete(ctx, req.(*TicketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaBackend_MyTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaBackendServer).MyTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_server.CinemaBackend/MyTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaBackendServer).MyTickets(ctx, req.(*MyTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaBackend_ServiceDesc is the grpc.ServiceDesc for CinemaBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_server.CinemaBackend",
	HandlerType: (*CinemaBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuth",
			Handler:    _CinemaBackend_UserAuth_Handler,
		},
		{
			MethodName: "FilmRoom",
			Handler:    _CinemaBackend_FilmRoom_Handler,
		},
		{
			MethodName: "TicketCreate",
			Handler:    _CinemaBackend_TicketCreate_Handler,
		},
		{
			MethodName: "TicketDelete",
			Handler:    _CinemaBackend_TicketDelete_Handler,
		},
		{
			MethodName: "MyTickets",
			Handler:    _CinemaBackend_MyTickets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Films",
			Handler:       _CinemaBackend_Films_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
