// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaClient is the client API for Cinema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaClient interface {
	UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
	Films(ctx context.Context, in *FilmsRequest, opts ...grpc.CallOption) (*FilmsResponse, error)
	FilmRoom(ctx context.Context, in *FilmRoomRequest, opts ...grpc.CallOption) (*FilmRoomResponse, error)
	TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error)
	TicketDelete(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error)
	MyTickets(ctx context.Context, in *MyTicketsRequest, opts ...grpc.CallOption) (*MyTicketsResponse, error)
}

type cinemaClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaClient(cc grpc.ClientConnInterface) CinemaClient {
	return &cinemaClient{cc}
}

func (c *cinemaClient) UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, "/api.Cinema/UserAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaClient) Films(ctx context.Context, in *FilmsRequest, opts ...grpc.CallOption) (*FilmsResponse, error) {
	out := new(FilmsResponse)
	err := c.cc.Invoke(ctx, "/api.Cinema/Films", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaClient) FilmRoom(ctx context.Context, in *FilmRoomRequest, opts ...grpc.CallOption) (*FilmRoomResponse, error) {
	out := new(FilmRoomResponse)
	err := c.cc.Invoke(ctx, "/api.Cinema/FilmRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaClient) TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error) {
	out := new(TicketCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Cinema/TicketCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaClient) TicketDelete(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error) {
	out := new(TicketDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Cinema/TicketDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaClient) MyTickets(ctx context.Context, in *MyTicketsRequest, opts ...grpc.CallOption) (*MyTicketsResponse, error) {
	out := new(MyTicketsResponse)
	err := c.cc.Invoke(ctx, "/api.Cinema/MyTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaServer is the server API for Cinema service.
// All implementations must embed UnimplementedCinemaServer
// for forward compatibility
type CinemaServer interface {
	UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error)
	Films(context.Context, *FilmsRequest) (*FilmsResponse, error)
	FilmRoom(context.Context, *FilmRoomRequest) (*FilmRoomResponse, error)
	TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error)
	TicketDelete(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error)
	MyTickets(context.Context, *MyTicketsRequest) (*MyTicketsResponse, error)
	mustEmbedUnimplementedCinemaServer()
}

// UnimplementedCinemaServer must be embedded to have forward compatible implementations.
type UnimplementedCinemaServer struct {
}

func (UnimplementedCinemaServer) UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuth not implemented")
}
func (UnimplementedCinemaServer) Films(context.Context, *FilmsRequest) (*FilmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Films not implemented")
}
func (UnimplementedCinemaServer) FilmRoom(context.Context, *FilmRoomRequest) (*FilmRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilmRoom not implemented")
}
func (UnimplementedCinemaServer) TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketCreate not implemented")
}
func (UnimplementedCinemaServer) TicketDelete(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketDelete not implemented")
}
func (UnimplementedCinemaServer) MyTickets(context.Context, *MyTicketsRequest) (*MyTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTickets not implemented")
}
func (UnimplementedCinemaServer) mustEmbedUnimplementedCinemaServer() {}

// UnsafeCinemaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaServer will
// result in compilation errors.
type UnsafeCinemaServer interface {
	mustEmbedUnimplementedCinemaServer()
}

func RegisterCinemaServer(s grpc.ServiceRegistrar, srv CinemaServer) {
	s.RegisterService(&Cinema_ServiceDesc, srv)
}

func _Cinema_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cinema/UserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServer).UserAuth(ctx, req.(*UserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cinema_Films_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServer).Films(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cinema/Films",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServer).Films(ctx, req.(*FilmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cinema_FilmRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServer).FilmRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cinema/FilmRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServer).FilmRoom(ctx, req.(*FilmRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cinema_TicketCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServer).TicketCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cinema/TicketCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServer).TicketCreate(ctx, req.(*TicketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cinema_TicketDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServer).TicketDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cinema/TicketDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServer).TicketDelete(ctx, req.(*TicketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cinema_MyTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServer).MyTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cinema/MyTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServer).MyTickets(ctx, req.(*MyTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cinema_ServiceDesc is the grpc.ServiceDesc for Cinema service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cinema_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cinema",
	HandlerType: (*CinemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuth",
			Handler:    _Cinema_UserAuth_Handler,
		},
		{
			MethodName: "Films",
			Handler:    _Cinema_Films_Handler,
		},
		{
			MethodName: "FilmRoom",
			Handler:    _Cinema_FilmRoom_Handler,
		},
		{
			MethodName: "TicketCreate",
			Handler:    _Cinema_TicketCreate_Handler,
		},
		{
			MethodName: "TicketDelete",
			Handler:    _Cinema_TicketDelete_Handler,
		},
		{
			MethodName: "MyTickets",
			Handler:    _Cinema_MyTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
