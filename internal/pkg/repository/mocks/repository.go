// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/Bdido86/movie-tickets/internal/pkg/models"
	server "gitlab.ozon.dev/Bdido86/movie-tickets/pkg/api/server"
)

// MockCinema is a mock of Cinema interface.
type MockCinema struct {
	ctrl     *gomock.Controller
	recorder *MockCinemaMockRecorder
}

// MockCinemaMockRecorder is the mock recorder for MockCinema.
type MockCinemaMockRecorder struct {
	mock *MockCinema
}

// NewMockCinema creates a new mock instance.
func NewMockCinema(ctrl *gomock.Controller) *MockCinema {
	mock := &MockCinema{ctrl: ctrl}
	mock.recorder = &MockCinemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCinema) EXPECT() *MockCinemaMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockCinema) AuthUser(ctx context.Context, name string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, name)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockCinemaMockRecorder) AuthUser(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockCinema)(nil).AuthUser), ctx, name)
}

// CreateTicket mocks base method.
func (m *MockCinema) CreateTicket(ctx context.Context, filmId, placeId, currentUserId uint) (models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, filmId, placeId, currentUserId)
	ret0, _ := ret[0].(models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockCinemaMockRecorder) CreateTicket(ctx, filmId, placeId, currentUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockCinema)(nil).CreateTicket), ctx, filmId, placeId, currentUserId)
}

// DeleteTicket mocks base method.
func (m *MockCinema) DeleteTicket(ctx context.Context, ticketId, currentUserId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, ticketId, currentUserId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockCinemaMockRecorder) DeleteTicket(ctx, ticketId, currentUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockCinema)(nil).DeleteTicket), ctx, ticketId, currentUserId)
}

// GetFilmRoom mocks base method.
func (m *MockCinema) GetFilmRoom(ctx context.Context, filmId, currentUserId uint) (models.FilmRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmRoom", ctx, filmId, currentUserId)
	ret0, _ := ret[0].(models.FilmRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmRoom indicates an expected call of GetFilmRoom.
func (mr *MockCinemaMockRecorder) GetFilmRoom(ctx, filmId, currentUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmRoom", reflect.TypeOf((*MockCinema)(nil).GetFilmRoom), ctx, filmId, currentUserId)
}

// GetFilms mocks base method.
func (m *MockCinema) GetFilms(ctx context.Context, limit, offset uint64, desc bool, found func(*server.Film) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, limit, offset, desc, found)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockCinemaMockRecorder) GetFilms(ctx, limit, offset, desc, found interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockCinema)(nil).GetFilms), ctx, limit, offset, desc, found)
}

// GetMyTickets mocks base method.
func (m *MockCinema) GetMyTickets(ctx context.Context, currentUserId uint) ([]models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyTickets", ctx, currentUserId)
	ret0, _ := ret[0].([]models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyTickets indicates an expected call of GetMyTickets.
func (mr *MockCinemaMockRecorder) GetMyTickets(ctx, currentUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyTickets", reflect.TypeOf((*MockCinema)(nil).GetMyTickets), ctx, currentUserId)
}

// GetUserIdByToken mocks base method.
func (m *MockCinema) GetUserIdByToken(ctx context.Context, token string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByToken", ctx, token)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByToken indicates an expected call of GetUserIdByToken.
func (mr *MockCinemaMockRecorder) GetUserIdByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByToken", reflect.TypeOf((*MockCinema)(nil).GetUserIdByToken), ctx, token)
}
