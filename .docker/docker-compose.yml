version: '3.9'

networks:
  somenet:
    driver: bridge

services:
  postgres:
    image: postgres:14.4
    container_name: 'postgresql-movie-tickets'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./postgres/data:/var/lib/postgresql/data # том для того, чтобы при перезапуске контейнера все данные сохранялись
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf # конфиг БД
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    restart: always
    networks:
      - somenet

  postgres-qa:
    image: postgres:14.4
    container_name: 'qa-postgresql-movie-tickets'
    environment:
      POSTGRES_USER: ${QA_DB_USER}
      POSTGRES_PASSWORD: ${QA_DB_PASSWORD}
      POSTGRES_DB: ${QA_DB_NAME}
    volumes:
      - ./postgres/data-qa:/var/lib/postgresql/data # том для того, чтобы при перезапуске контейнера все данные сохранялись
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf # конфиг БД
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - ${QA_DB_PORT}:5432
    restart: always
    networks:
      - somenet

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: 'pgbouncer-postgresql-movie-tickets'
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - "6432:6432"
    depends_on:
      - postgres
    restart: always
    networks:
      - somenet

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8095:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    networks:
      - somenet

  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    restart: always
    networks:
      - somenet

  kafka1:
    image: wurstmeister/kafka
    ports:
      - "9095:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka1:9092,OUTSIDE://kafka1:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,OUTSIDE://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT

      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_BROKER_ID: 501
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CREATE_TOPICS: "TicketCreate:1:3,TicketDelete:1:3:compact"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    depends_on:
      - zookeeper
    networks:
      - somenet

  kafka2:
    image: wurstmeister/kafka
    ports:
      - "9096:9094"
    environment:
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka2:9092,OUTSIDE://kafka2:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,OUTSIDE://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_BROKER_ID: 502
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    depends_on:
      - zookeeper
    networks:
      - somenet

  kafka3:
    image: wurstmeister/kafka
    ports:
      - "9097:9094"
    environment:
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka3:9092,OUTSIDE://kafka3:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,OUTSIDE://localhost:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_BROKER_ID: 503
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    depends_on:
      - zookeeper
    networks:
      - somenet